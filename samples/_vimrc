" yyq's vimrc

" Initialization... {{{
if has('autocmd')
	" Remove ALL autocommands for the current group
	au!
endif

set nocompatible	"disable backwards-compatible with vi
filetype off

set viminfo=<100,'100,/50,:100,h,r$TEMP:,s10
"           |    |    |   |    | |       + 不保存超过10KB寄存器
"           |    |    |   |    | + 不保存TEMP目录下文件的相关信息
"           |    |    |   |    + 载入viminfo文件时关闭hlsearch高亮
"           |    |    |   + 保存命令历史条数
"           |    |    + 保存搜索历史条数
"           |    + 保存最近100个文件中的标记
"           + 每个寄存器中保存的行数

" }}}

 " General {{{
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

if has('win32') || has ('win64')
	let $VIMFILES = '""' . $VIM . '\vimfiles"'
else
	let $VIMFILES = $HOME."/.vim"
endif

set t_Co=256
set background=dark

set path+=./**
set backup              " make backup files
set backupdir=C:\Temp   " where to put backup files
set backupskip=C:\Temp  " Don’t create backups when editing files in certain directories
set noswapfile          " no swap files
set undofile            " make undo files
set undodir=C:\Temp
set undolevels=1000 " use many muchos levels of undo
set history=1000 " remember more commands and<LeftMouse> search history
set ignorecase    " ignore case when searching
set infercase     " ignore case whet auto-complete
set smartcase     " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set backspace=indent,eol,start        " allow backspacing over everything in insert mode
set confirm       " Show confirm dialog
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set showmatch     " set show matching parenthesis
set incsearch     " show search matches as you type
set visualbell    " Silence the bell, use a flash instead
set showcmd       " Show (partial) command in status line
set showmode      " Show the current mode
set wildmenu      " turn on command line completion wild style
set wildmode=list:longest,full
set wildignore=*.dll,*.exe,*.gif,*.jpg,*.mm ",*.png,*.snag,*.ssd,*.xmind
set esckeys       " Allow cursor keys in insert mode
set modeline      " Respect modeline in files
set modelines=4
set report=0      " Always display message
set shortmess-=S  "display number of search matches & index of a current match
set dictionary=D:\cygwin64\usr\share\dict\linux.words
set thesaurus=$HOME\vimfiles\thesaurus\english.txt

"set gdefault      " applies substitutions globally on lines
" }}}

" Shell {{{
"set shell=$COMSPEC " sets shell to correct path for cmd.exe

" Makes bash open in the working directory
"let $CHERE_INVOKING=1
" Default path for Cygwin 64-bit, change accordingly
"set shell=D:\cygwin64\bin\bash.exe
" Without --login, Cygwin won't mount some directories such as /usr/bin/
"set shellcmdflag=--login\ -c
" Default value is (, but bash needs "
set shellxquote=\"
" Paths will use / instead of \
"set shellslash
" PATH to determine available checkers
"let $PATH .= ';D:\cygwin64\bin'
" }}}

" Lines {{{
"set whichwrap=b,s,h,l,<,>,~,[,] " everything wraps
"             | | | | | | | | |
"             | | | | | | | | +-- "]" Insert and Replace
"             | | | | | | | +-- "[" Insert and Replace
"             | | | | | | +-- "~" Normal
"             | | | | | +-- <Right> Normal and Visual
"             | | | | +-- <Left> Normal and Visual
"             | | | +-- "l" Normal and Visual (not recommended)
"             | | +-- "h" Normal and Visual (not recommended)
"             | +-- <Space> Normal and Visual
"             +-- <BS> Normal and Visual

" don't wrap lines
set wrap 
map <F2> <Esc>:set nowrap<CR>
map <S-F2> <Esc>:set wrap<CR>
" Makes gj/gk move by virtual lines when used without a count, and by physical lines when used with a count.
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" Like gJ, but always remove spaces
fun! JoinSpaceless()
    execute 'normal gJ'
    " Character under cursor is whitespace?
    if matchstr(getline('.'), '\%' . col('.') . 'c.') =~ '\s'
        " When remove it!
        execute 'normal dw'
    endif
endfun
nnoremap <F10> :call JoinSpaceless()<CR>
" }}}

" Paste {{{
" Vim will switch to paste mode, disabling all kinds of smartness and 
" just pasting a whole buffer of text. 
" When in paste-mode auto indent will be turned off.
set pastetoggle=<F5>

set paste
" Use the OS clipboard by default
set clipboard=unnamed
" }}}

" UI {{{
" highlight the current column&line
set cursorline cursorcolumn 
highlight Cursor guifg=white guibg=#1874cd
highlight iCursor guifg=white guibg=#1874cd
highlight CursorLine guibg=white

" set the menu & the message to English
set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set number
" set relativenumber
hi CursorLineNr guifg=silver

set mouse=a				" enable full mouse support in the console
autocmd GUIEnter * simalt ~x		" 启动时最大化
set ruler                               " Always show current positions along the bottom

"}}}

" Menus {{{
amenu <silent>Tabs.New<TAB>Open\ a\ new\ tab :tabnew<CR>
amenu Tabs.-SEPT1- :
amenu <silent>Tabs.&Next :tabnext<CR>
amenu <silent>Tabs.&Previous :tabprevious<CR>
amenu Tabs.-SEPT2- :
amenu Tabs.&Close :confirm tabclose<CR>
"}}}

" ToolBar {{{
" Do not install the ToolBar if it is already done.
"if !exists("did_install_custom_toolbar")
"    let did_install_custom_toolbar = 1

amenu 1.10 ToolBar.New :new<CR>
amenu 1.20 ToolBar.Open :browse confirm e<CR>

an 1.400 ToolBar.-sep8- <Nop>
an icon=WinMax 1.410 ToolBar.Maximize <C-w>_
an icon=WinVSplit 1.420 ToolBar.ResizeEqual <C-w>=

"}}}

" ToolTips {{{
tmenu 1.10 ToolBar.New New
tmenu 1.20 ToolBar.Open Open
tmenu 1.30 ToolBar.Save Save
tmenu 1.40 ToolBar.SaveAll Save All
tmenu 1.50 ToolBar.Print Print
tmenu 1.60 ToolBar.Undo Undo
tmenu 1.70 ToolBar.Redo Redo
tmenu 1.80 ToolBar.Cut Cut
tmenu 1.90 ToolBar.Copy Copy
tmenu 1.100 ToolBar.Paste Paste
tmenu 1.310 ToolBar.Maximize Maximize Buffer
tmenu 1.320 ToolBar.ResizeEqual Resize Equal Buffer
"}}}

" File {{{
set fileencoding=utf-8
set encoding=utf-8
set tenc=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

"language message zh_CN.UTF-8
language message en_US.UTF-8

set autoread		"error alert for destructive write

"print the current clock time
set printheader=%<%f%h%m%40{strftime(\"%I:%M:%S\ \%p,\ %a\ %b\ %d,\ %Y\")}%=Page\ %N

"Print the last modification time
set printheader=%<%f%h%m\ %40{strftime(\"%c\",getftime(expand(\"%%\")))}%=Page\ %N

"Turning on options for filetypes; detection, plugins, and indentation
filetype plugin on

if has("autocmd") && exists("+omnifunc")
autocmd Filetype *
\ if &omnifunc == "" |
\ setlocal omnifunc=syntaxcomplete#Complete |
\ endif
endif

" using vimdiff from within vim
au FilterWritePre * if &diff | colorscheme default | endif

" calling vimdiff from the command-line
if &diff
    colorscheme default
else
    colorscheme Tomorrow-Night "xoria256
endif
" }}}

" statusline {{{
set laststatus=2 "enable status line always
set statusline=%2*%n%m%r%h%w%*\ %F\ %1*[FORMAT=%2*%{&ff}:%{&fenc!=''?&fenc:&enc}%1*]\ [TYPE=%2*%Y%1*]\ [COL=%2*%03v%1*]\ [ROW=%2*%03l%1*/%3*%L(%p%%)%1*]

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=peru
  elseif a:mode == 'r'
    hi statusline guibg=blue
  else
    hi statusline guibg=#1C1C1C
  endif
endfunction

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline guibg=#1C1C1C guifg=white

hi statusline guibg=#1C1C1C
hi User1 guifg=gray
hi User2 guifg=peru
hi User3 guifg=white
hi User4 gui=bold
" }}}

" Font {{{
if has('gui_running')
	" 确保所有的文件类型会在菜单“语法”（“Syntax”）下出现，而不是出现一个菜单项“Show filetypes in menu”
	"let do_syntax_sel_menu=1
	set guioptions-=m
	set guioptions-=T
	set guioptions-=r
	set guioptions-=l
	set guioptions-=b
	" Alternate open/close menu/toolbar
	nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
	nnoremap <C-F2> :if &go=~#'T'<Bar>set go-=T<Bar>else<Bar>set go+=T<Bar>endif<CR>
	nnoremap <C-F3> :if &go=~#'r'<Bar>set go-=r<Bar>else<Bar>set go+=r<Bar>endif<CR>

	if has("win16") || has("win32") || has("win95") || has("win64")
		set guifont=Sarasa\ Mono\ SC:h11,SpaceMono\ NF:h11,Inconsolata:h12,Consolas:h11,Courier_New:h11:cANSI
		"set guifontwide=Sarasa\ Mono\ SC:h11
	else
		set guifont=MiscFixed\ Semi-Condensed\ 10
	endif
endif
" }}}

" Maps {{{

" Alternate open/close a fold
nnoremap <space> za
"nmap <tab> V>
"nmap <s-tab> V<
"vmap <tab> >gv
"vmap <s-tab> <gv
" Stay in visual mode when indenting.
vnoremap < <gv
vnoremap > >gv

nnoremap <C-Insert> :tabnew<CR>
nnoremap <C-Delete> :tabclose<CR>

noremap <silent><tab>m :tabnew<cr>
noremap <silent><tab>e :tabclose<cr>
noremap <silent><tab>n :tabn<cr>
noremap <silent><tab>p :tabp<cr>
noremap <silent><s-tab> :tabnext<CR>
inoremap <silent><s-tab> <ESC>:tabnext<CR>

" Search for visually highlighted text
vmap <silent> //    y/<C-R>=escape(@", '\\/.*$^~[]')<CR><CR>

" Open help on current word in a new tab
noremap <silent> <F1> :execute "tab h " . expand("<cword>")<cr>

" 显示/禁止行列光标
nmap <silent> <F6> <Esc>:call ToggleCursor()<CR>

" Determining the highlight group that the word under the cursor belongs to
nmap <silent> <F7>   :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Show all buffers in tabs, or to close all tabs (toggle: it alternately executes  :tab ball and :tabo).
let notabs = 0
nnoremap <silent> <F8> :let notabs=!notabs<Bar>:if notabs<Bar>:tabo<Bar>:else<Bar>:tab ball<Bar>:tabn<Bar>:endif<CR>

function! ToggleCursor()
     if &cursorcolumn
          set nocursorline nocursorcolumn
     else
          set cursorline cursorcolumn
     endif
endfunction

" clear highlighted searches
nmap <silent> ,/ :nohlsearch<CR>

function! ToggleHLSearch()
	if &hls
		set nohls
	else
		set hls
	endif
endfunction

" Using very magic mode 
nnoremap / /\v
vnoremap / /\v
cnoremap %s/ %s/\v
nnoremap :g/ :g/\v

set grepprg=grep\ -rnIH\ --exclude-dir=.git

let mapleader="," "Default \

nmap <silent> <leader><space> <Esc>:call ToggleHLSearch()<CR>

"Close tag
"inoremap <lt>/ </<C-x><C-o>
inoremap <C-Enter> </<C-x><C-o>

" Mark any tabs that are not at the beginning of the lines
nnoremap <leader>mt :match errorMsg /[^\t]\zs\t\+/<CR>

" Quickly edit/reload the vimrc file
nmap <silent> <leader>tv :tabe $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>
autocmd BufWritePost $MYVIMRC source $MYVIMRC

" Reselect the text that was just pasted
nnoremap <leader>p V`]

" Open learn-vi folder
let g:browsefilter = "*.*"
nnoremap <leader>v :browse tabe E:\Anthony_GitHub\learn-vim<CR>

" 打开另存为对话框
nnoremap <leader>w :browse sav<CR>

" Set current directory to current file with ,cd
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
"open windows command prompt in the current file's directory
nnoremap <leader>cc :!start cmd /k cd %:p:h:8<cr>
"open explorer in the current file's directory
nnoremap <leader>ce :!start explorer %:p:h:8<cr>

" 复制当前文件/路径到剪贴板
nmap <leader>fn :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
nmap <leader>fp :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

vnoremap <leader>a <c-a>
vnoremap <leader>x <c-x>

" toggle use of 'modeline' command.  Doesn't reload the
" settings until you do BufRead.  vimrc doesn't support the command
" separator '|' so we use '<bar>':
 nnoremap <leader>ml :setlocal invmodeline <bar> doautocmd BufRead<cr>

" }}}

" Improve performance {{{
autocmd BufWinLeave * call clearmatches()
set nospell
" }}}

" Abbreviations {{{
" Ctrl-] is used to expand an abbreviation without inserting any extra characters
abbreviate #b /**********************
abbreviate #e **********************/
iabbrev pcode <p style="text-indent:2em"><code class="inset"></code></p><Esc>2F<i
iabbrev icode <code class="inset"></code><Esc>F<i
"iabbrev icode <code class="inset">!cursor!</code><Esc>:call search('!cursor!','b')<cr>cf!
"cabbrev h tab h
" }}}

" Others {{{

" Template
autocmd! BufNewFile * silent! 0r $VIM/vimfiles/skel/Template.%:e

" Fold
set foldenable              " Turn on folding
set foldmethod=marker       " Fold on the marker
set foldcolumn=2

" Show invisible characters
set list
set listchars=tab:\|.,trail:,nbsp:.,extends:¬
" Enter the middle-dot by pressing Ctrl-k then .M
" Enter the right-angle-quote by pressing Ctrl-k then >>
" Enter the Pilcrow mark by pressing Ctrl-k then PI
" The command :dig displays other digraphs you can use.

" save on losing focus
au FocusLost * :wa

" visually select text then press ~ to convert the text to  UPPER CASE,
" then to lower case, then to Title Case.
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgvl

" }}}

" HTML {{{
" Escape/unescape & < > HTML entities in range (default current line).
function! HtmlEntities(line1, line2, action)
	let search = @/
	let range = 'silent ' . a:line1 . ',' . a:line2
	if a:action == 0 " must convert &amp; last
		execute range . 'sno/&lt;/</eg'
		execute range . 'sno/&gt;/>/eg'
		execute range . 'sno/&amp;/&/eg'
	else " must convert & first
		execute range . 'sno/&/&amp;/eg'
		execute range . 'sno/</&lt;/eg'
		execute range . 'sno/>/&gt;/eg'
	endif
	nohl
	let @/ = search
endfunction

command! -range -nargs=1 HEntities call HtmlEntities(<line1>, <line2>, <args>)

noremap <silent> <Leader>hu :HEntities 0<CR>
noremap <silent> <Leader>he :HEntities 1<CR>

map <silent> <F9> <Esc>:HEntities 1<CR>

" }}}

" Autocommand {{{

augroup filetypedetect
	au BufNewFile,BufRead *.csc setfiletype csc
	au BufNewFile,BufRead *.msh setfiletype mxl
	au BufNewFile,BufRead *.mxl setfiletype mxl
	au BufNewFile,BufRead *.rle setfiletype rle
	au BufNewFile,BufRead *.log setfiletype log
augroup end

"au Filetype html,xml,xsl source $VIM/vimfile/plugin/closetag.vim
"au FileType html,xml set omnifunc=xmlcomplete#CompleteTags

augroup vimrc-auto-mkdir
  autocmd!
  autocmd BufWritePre * call s:auto_mkdir(expand('<afile>:p:h'), v:cmdbang)
  function! s:auto_mkdir(dir, force)
    if !isdirectory(a:dir)
          \   && (a:force
          \       || input("'" . a:dir . "' does not exist. Create? [y/N]") =~? '^y\%[es]$')
      call mkdir(iconv(a:dir, &encoding, &termencoding), 'p')
    endif
  endfunction
augroup END

augroup vgrep
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd QuickFixCmdPost l*    lwindow
augroup END

" }}}

" User Defined Command {{{
command! -bar DelTab %s/	//
command! DelLF %s/\n//
command! FmtCode DelTab|DelLF
"}}}

" Source Code {{{
set pythonthreehome=C:\tools\Python3
set pythonthreedll=C:\tools\Python3\python38.dll
augroup make_python
	au!
	au FileType python set makeprg=C:\tools\Python3\python\ %
augroup end
"}}}

" AfterPlugin {{{
" 取消用Ctrl-F调用查找窗口
unmap <C-F>

"避免删除的当字符进入剪切板
nnoremap x "_x

" show a colored column 
" so I can see when I write a too-long line of code)
set colorcolumn=70	
highlight ColorColumn guibg=darkred
" }}}
